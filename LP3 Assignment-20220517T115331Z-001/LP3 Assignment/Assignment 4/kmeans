#import packages
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#create dataset using DataFrame
df=pd.DataFrame({&#39;X&#39;:[0.1,0.15,0.08,0.16,0.2,0.25,0.24,0.3],
&#39;y&#39;:[0.6,0.71,0.9,0.85,0.3,0.5,0.1,0.2]})
f1 = df[&#39;X&#39;].values
f2 = df[&#39;y&#39;].values
X = np.array(list(zip(f1, f2)))
print(X)

#centroid points
C_x=np.array([0.1,0.3])
C_y=np.array([0.6,0.2])
centroids=C_x,C_y

#plot the given points
colmap = {1: &#39;r&#39;, 2: &#39;b&#39;}
plt.scatter(f1, f2, color=&#39;k&#39;)
plt.show()

#for i in centroids():
plt.scatter(C_x[0],C_y[0], color=colmap[1])

plt.scatter(C_x[1],C_y[1], color=colmap[2])
plt.show()

C = np.array(list((C_x, C_y)), dtype=np.float32)
print (C)

#plot given elements with centroid elements
plt.scatter(f1, f2, c=&#39;#050505&#39;)
plt.scatter(C_x[0], C_y[0], marker=&#39;*&#39;, s=200, c=&#39;r&#39;)
plt.scatter(C_x[1], C_y[1], marker=&#39;*&#39;, s=200, c=&#39;b&#39;)
plt.show()

#import KMeans class and create object of it
from sklearn.cluster import KMeans
model=KMeans(n_clusters=2,random_state=0)
model.fit(X)
labels=model.labels_
print(labels)

#using labels find population around centroid
count=0
for i in range(len(labels)):
if (labels[i]==1):
count=count+1

print(&#39;No of population around cluster 2:&#39;,count-1)

#Find new centroids
new_centroids = model.cluster_centers_

print(&#39;Previous value of m1 and m2 is:&#39;)
print(&#39;M1==&#39;,centroids[0])
print(&#39;M1==&#39;,centroids[1])

print(&#39;updated value of m1 and m2 is:&#39;)
print(&#39;M1==&#39;,new_centroids[0])
print(&#39;M1==&#39;,new_centroids[1])
